import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
import requests
import json
from dotenv import load_dotenv
import os
from api_payment import create_invoice
from pymongo import MongoClient

load_dotenv()
API_TOKEN = os.getenv('TELEGRAM_BOT_API_TOKEN')
MONGO_URI = os.getenv('MONGO_URI')  # MongoDB connection URI
ADMIN_CHAT_ID = '5947862539'  # Admin chat ID

bot = telebot.TeleBot(API_TOKEN)
client = MongoClient(MONGO_URI)
db = client['leads_database']

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("Bell", callback_data='bell'))
    markup.add(InlineKeyboardButton("Telsus", callback_data='telsus'))
    markup.add(InlineKeyboardButton("Rogers", callback_data='rogers'))
    
    bot.send_message(message.chat.id, "Welcome! Please select a carrier:", reply_markup=markup)

def show_bell_options(call):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("Bell BC - 10k - $20 USD", callback_data='bell_bc_10k'))
    markup.add(InlineKeyboardButton("Bell BC - 20k - $35 USD", callback_data='bell_bc_20k'))
    markup.add(InlineKeyboardButton("Bell Ontario - 10k - $20 USD", callback_data='bell_ontario_10k'))
    markup.add(InlineKeyboardButton("Bell Ontario - 20k - $35 USD", callback_data='bell_ontario_20k'))
    markup.add(InlineKeyboardButton("Bell Alberta - 10k - $20 USD", callback_data='bell_alberta_10k'))
    markup.add(InlineKeyboardButton("Bell Alberta - 20k - $35 USD", callback_data='bell_alberta_20k'))
    markup.add(InlineKeyboardButton("Custom Order (50k+)", callback_data='bell_custom'))
    
    bot.edit_message_text("Select the quantity and region for Bell Leads:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)

def show_telsus_options(call):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("Telsus BC - 10k - $20 USD", callback_data='telsus_bc_10k'))
    markup.add(InlineKeyboardButton("Telsus BC - 20k - $35 USD", callback_data='telsus_bc_20k'))
    markup.add(InlineKeyboardButton("Telsus Ontario - 10k - $20 USD", callback_data='telsus_ontario_10k'))
    markup.add(InlineKeyboardButton("Telsus Ontario - 20k - $35 USD", callback_data='telsus_ontario_20k'))
    markup.add(InlineKeyboardButton("Telsus Alberta - 10k - $20 USD", callback_data='telsus_alberta_10k'))
    markup.add(InlineKeyboardButton("Telsus Alberta - 20k - $35 USD", callback_data='telsus_alberta_20k'))
    markup.add(InlineKeyboardButton("Custom Order (50k+)", callback_data='telsus_custom'))
    
    bot.edit_message_text("Select the quantity and region for Telsus Leads:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)

def show_rogers_options(call):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("Rogers BC - 10k - $20 USD", callback_data='rogers_bc_10k'))
    markup.add(InlineKeyboardButton("Rogers BC - 20k - $35 USD", callback_data='rogers_bc_20k'))
    markup.add(InlineKeyboardButton("Rogers Ontario - 10k - $20 USD", callback_data='rogers_ontario_10k'))
    markup.add(InlineKeyboardButton("Rogers Ontario - 20k - $35 USD", callback_data='rogers_ontario_20k'))
    markup.add(InlineKeyboardButton("Rogers Alberta - 10k - $20 USD", callback_data='rogers_alberta_10k'))
    markup.add(InlineKeyboardButton("Rogers Alberta - 20k - $35 USD", callback_data='rogers_alberta_20k'))
    markup.add(InlineKeyboardButton("Custom Order (50k+)", callback_data='rogers_custom'))
    
    bot.edit_message_text("Select the quantity and region for Rogers Leads:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == 'bell':
        show_bell_options(call)
    elif call.data == 'telsus':
        show_telsus_options(call)
    elif call.data == 'rogers':
        show_rogers_options(call)
    elif call.data.endswith('10k'):
        amount = 20  # 10k leads cost $20
    elif call.data.endswith('20k'):
        amount = 35  # 20k leads cost $35
    
        description = f"Purchase {call.data.replace('_', ' ')}"
        invoice_url = create_invoice(price_amount=amount, price_currency="usd", order_description=description)
        
        if invoice_url:
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("Complete Payment", url=invoice_url))
            bot.send_message(call.message.chat.id, "Click the button below to complete your payment:", reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, "Failed to create payment. Please try again later.")
    elif 'custom' in call.data:
        bot.send_message(call.message.chat.id, "For orders of 50k+, please contact us directly for a custom order.")

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.chat.id == int(ADMIN_CHAT_ID):
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("View Users", callback_data='view_users'))
        markup.add(InlineKeyboardButton("Upload Leads", callback_data='upload_leads'))
        bot.send_message(message.chat.id, "Admin Panel:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "You are not authorized to access the admin panel.")

@bot.callback_query_handler(func=lambda call: call.data in ['view_users', 'upload_leads'])
def admin_actions(call):
    if call.message.chat.id == int(ADMIN_CHAT_ID):
        if call.data == 'view_users':
            # Here you should implement logic to view bot users
            # This is a placeholder message
            bot.send_message(call.message.chat.id, "Here is the list of users (this feature needs implementation).")
        elif call.data == 'upload_leads':
            # Request file upload
            bot.send_message(call.message.chat.id, "Please upload the text file containing the leads.")
            bot.register_next_step_handler(call.message, process_leads_file)
    else:
        bot.send_message(call.message.chat.id, "You are not authorized to perform this action.")

def process_leads_file(message):
    if message.chat.id == int(ADMIN_CHAT_ID):
        if message.document:
            file_id = message.document.file_id
            file_info = bot.get_file(file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            
            with open('leads.txt', 'wb') as new_file:
                new_file.write(downloaded_file)

            # Read leads from the file and store them in MongoDB
            with open('leads.txt', 'r') as file:
                leads = file.readlines()
            
            region = determine_region_from_filename('leads.txt')  # Implement a function to determine the region
            store_leads_in_db(region, leads)

            bot.send_message(message.chat.id, "Leads have been successfully uploaded and stored.")
        else:
            bot.send_message(message.chat.id, "Please upload a valid text file.")
    else:
        bot.send_message(message.chat.id, "You are not authorized to perform this action.")

def determine_region_from_filename(filename):
    if 'bc' in filename.lower():
        return 'bell_bc'
    elif 'ontario' in filename.lower():
        return 'bell_ontario'
    elif 'alberta' in filename.lower():
        return 'bell_alberta'
    return 'unknown'

def store_leads_in_db(region, leads):
    collection = db[region]
    for lead in leads:
        phone_number = lead.strip()
        if phone_number:
            collection.insert_one({'phone_number': phone_number})

bot.polling()
